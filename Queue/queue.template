
#include <cassert>
#include <iostream>
#include "queue.h"

template<typename T>
queue<T>::queue() {
    front = 0;
    back = 0;
    used = 0;
}

template<typename T>
void queue<T>::insert(T element) {
    assert(!isFull());
    data[back] = element;
    back = (back + 1) % ARRAY_SIZE; // circular
    used++;
}

template<typename T>
T queue<T>::remove() {
    assert(!isEmpty());
    T value = data[front];
    front = (front + 1) % ARRAY_SIZE;
    used--;
    return value;
}

template<typename T>
bool queue<T>::isFull() const {
    return front == ((back + 1) % ARRAY_SIZE);    // front passed back
}

template<typename T>
bool queue<T>::isEmpty() const {
    return front == back;
}

template<typename T>
void queue<T>::print_queue() const {
    if (isEmpty()) std::cout << "queue is empty...\n";
    for (int i = front; i != back; i = (i + 1) % ARRAY_SIZE) {
        std::cout << data[i] << ' ';
    }
    std::cout << '\n';
}
