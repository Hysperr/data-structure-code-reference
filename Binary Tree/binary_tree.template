

#include <iostream>
#include <iomanip>
#include "binary_tree.h"

template<typename T>
binary_tree::binary_tree(binary_tree *init_left, binary_tree *init_right, const T &entry) {
    left_field = init_left;
    right_field = init_right;
    data_field = entry;
}

template<typename Process, typename BinTree>
void inorder(Process f, BinTree *node_ptr) {
    if (node_ptr != nullptr) {
        inorder(f, node_ptr->left());   // template: does not actually know about data fields
        f(node_ptr->data());
        inorder(f, node_ptr->right());
    }
};

template<typename Process, typename BinTree>
void postorder(Process f, BinTree *node_ptr) {
    if (node_ptr != nullptr) {
        postorder(f, node_ptr->left());
        postorder(f, node_ptr->right());
        f(node_ptr->data());
    }
};

template<typename Process, typename BinTree>
void preorder(Process f, BinTree *node_ptr) {
    if (node_ptr != nullptr) {
        f(node_ptr->data());
        preorder(f, node_ptr->left());
        preorder(f, node_ptr->right());
    }
};

template<typename T, typename SizeType>
void print(binary_tree<T> *node_ptr, SizeType depth) {
    if (node_ptr != nullptr) {
        print(node_ptr->right(), depth + 1);
        std::cout << std::setw(4 * depth) << "";    // indent 4 * depth spaces.
        std::cout << node_ptr->data() << std::endl;
        print(node_ptr->left(), depth + 1);
    }
};

template<typename T>
void tree_clear(binary_tree *&root_ptr) {
    binary_tree<T> *child;
    if (root_ptr != nullptr) {
        child = root_ptr->left();
        tree_clear(child);
        child = root_ptr->right();
        tree_clear(child);
        delete root_ptr;
        root_ptr = nullptr;
    }
}

template<typename T>
std::size_t tree_size(const binary_tree<T> *node_ptr) {
    if (node_ptr == nullptr)
        return 0;
    else
        return 1 + (tree_size(node_ptr->left()) + tree_size(node_ptr->right()));
}
